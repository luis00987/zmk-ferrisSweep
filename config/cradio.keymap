/*
  * Copyright (c) 2020 The ZMK Contributors
  *test
  * SPDX-License-Identifier: MIT
  */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>

&sk { quick-release; };

/ {
    behaviors {
        hmr: hmr {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            label = "hmr";
            bindings = <&kp>, <&kp>;

            tapping-term-ms = <280>;
            hold-trigger-on-release;             // delay positional check until key-release
            flavor = "balanced";
            require-prior-idle-ms = <150>;
            require-prior-idle-ms = <150>;
            quick-tap-ms = <175>;
            hold-trigger-key-positions = <0 1 2 3 4 10 11 12 13 14 20 21 22 23 24 30 31 32 33>;
        };

        hml: hml {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            label = "hml";
            bindings = <&kp>, <&kp>;

            tapping-term-ms = <280>;
            hold-trigger-on-release;
            flavor = "balanced";
            require-prior-idle-ms = <150>;
            quick-tap-ms = <175>;
            hold-trigger-key-positions = <5 6 7 8 9 15 16 17 18 19 25 26 27 28 29 32 33 30 31>;
        };

        tapSk_holdLayer: tapSk_holdLayer {
            compatible = "zmk,behavior-hold-tap";
            label = "TAPSK_HOLDLAYER";
            bindings = <&mo>, <&sk>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            flavor = "balanced";
        };
    };

    combos {
        compatible = "zmk,combos";

        capWords {
            bindings = <&caps_word>;
            key-positions = <13 16>;
            timeout-ms = <150>;
            require-prior-idle-ms = <100>;
            layers = <0>;
        };

        toSymb {
            bindings = <&mo 7>;
            key-positions = <30 33>;
            timeout-ms = <150>;
            require-prior-idle-ms = <100>;
            layers = <0>;
            slow-release;
        };

        backL0 {
            bindings = <&to 0>;
            key-positions = <32 31>;
            timeout-ms = <150>;
            slow-release;
            require-prior-idle-ms = <100>;
            layers = <0>;
        };

        toAdj {
            bindings = <&mo 8>;
            key-positions = <0 4>;
            timeout-ms = <150>;
            slow-release;
            require-prior-idle-ms = <100>;
            layers = <0>;
        };

        escL {
            timeout-ms = <40>;
            bindings = <&kp ESCAPE>;
            key-positions = <3 2>;
            require-prior-idle-ms = <100>;
            layers = <0>;
        };

        aphostrope {
            timeout-ms = <35>;
            bindings = <&kp SQT>;
            key-positions = <8 7>;
            layers = <0>;
        };

        backR {
            bindings = <&kp BACKSPACE>;
            key-positions = <16 17>;
            timeout-ms = <40>;
            require-prior-idle-ms = <100>;
            layers = <0 6 5 7>;
        };

        backL {
            bindings = <&kp BACKSPACE>;
            key-positions = <12 13>;
            timeout-ms = <40>;
            require-prior-idle-ms = <100>;
            layers = <0 6 5 7>;
        };

        questionR {
            bindings = <&kp QUESTION>;
            key-positions = <27 28>;
            timeout-ms = <40>;
            require-prior-idle-ms = <100>;
            layers = <0>;
        };

        wordDel {
            bindings = <&kp LC(BACKSPACE)>;
            key-positions = <12 11>;
            timeout-ms = <40>;
            require-prior-idle-ms = <100>;
            layers = <0>;
        };

        delR {
            bindings = <&kp DELETE>;
            key-positions = <26 27>;
            timeout-ms = <40>;
            require-prior-idle-ms = <100>;
            layers = <0 6 5 7>;
        };

        wordDelR {
            bindings = <&kp LC(BACKSPACE)>;
            key-positions = <17 18>;
            timeout-ms = <40>;
            require-prior-idle-ms = <100>;
            layers = <0>;
        };

        delL {
            bindings = <&kp DELETE>;
            key-positions = <22 23>;
            timeout-ms = <40>;
            require-prior-idle-ms = <100>;
            layers = <0 6 5 7>;
        };

        enterL {
            bindings = <&kp ENTER>;
            key-positions = <21 22>;
            timeout-ms = <40>;
            require-prior-idle-ms = <100>;
            layers = <0>;
        };

        Sleep {
            bindings = <&kp K_SLEEP>;
            key-positions = <11 12 13 10 31>;
            timeout-ms = <150>;
            require-prior-idle-ms = <40>;
            layers = <0>;
        };

        menu {
            bindings = <&kp CAPS>;
            key-positions = <28 29>;
            timeout-ms = <40>;
            require-prior-idle-ms = <100>;
            layers = <0>;
        };
    };

    macros {
        sleep: sleep {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&kp LG(X)>,
                <&macro_wait_time 120>,
                <&kp U>,
                <&macro_wait_time 120>,
                <&kp S>;

            label = "SLEEP";
        };
    };

    keymap {
        compatible = "zmk,keymap";

        L0 {
            bindings = <
&kp Q  &kp W  &kp E  &kp R    &kp T                            &kp Y        &kp U    &kp I      &kp O    &kp P
&kp A  &kp S  &kp D  &kp F    &kp G                            &kp H        &kp J    &kp K      &kp L    &kp SEMI
&kp Z  &kp X  &kp C  &kp V    &kp B                            &kp N        &kp M    &kp COMMA  &kp DOT  &kp FSLH
                     &kp TAB  &tapSk_holdLayer 3 LEFT_SHIFT    &lt 5 SPACE  &kp RET
            >;
        };

        L1 {
            bindings = <
&none  &none  &none         &kp ESC   &none      &none    &kp ESCAPE  &kp UP        &kp SQT    &none
&none  &none  &none         &none     &none      &none    &kp LEFT    &kp DOWN      &kp RIGHT  &none
&none  &none  &kp LC(BSPC)  &kp BSPC  &kp DEL    &kp DEL  &kp BSPC    &kp LC(BSPC)  &kp ENTER  &kp QUESTION
                            &none     &none      &to 0    &to 2
            >;
        };

        fn {
            bindings = <
&sk HOME      &kp F7  &kp F8  &kp F9  &kp F12    &none            &none           &none      &none     &none
&kp LEFT_GUI  &kp F4  &kp F5  &kp F6  &kp F11    &kp PRINTSCREEN  &kp LEFT_SHIFT  &kp LCTRL  &kp LALT  &kp LEFT_GUI
&key_repeat   &kp F1  &kp F2  &kp F3  &kp F10    &kp CAPS         &sk LEFT_SHIFT  &sk LCTRL  &sk LALT  &sk LEFT_GUI
                              &none   &none      &none            &none
            >;
        };

        customWinSc {
            bindings = <
&kp LG(LC(F4))  &kp LG(TAB)    &kp LC(LG(LEFT_ARROW))  &kp LC(LG(RIGHT))  &kp LG(LC(D))    &none  &none  &none  &none  &none
&kp LC(A)       &kp LC(X)      &kp LC(C)               &kp LC(V)          &kp LG(E)        &none  &none  &none  &none  &none
&kp LC(Z)       &kp C_AC_HOME  &kp LG(LS(S))           &kp LG(D)          &kp LA(F4)       &none  &none  &none  &none  &none
                                                       &kp LS(LC(H))      &none            &none  &none
            >;
        };

        customIpadSC {
            bindings = <
&none      &none      &none                 &none      &none    &none  &none  &none  &none  &none
&kp LG(A)  &kp LG(X)  &kp LG(C)             &kp LG(V)  &none    &none  &none  &none  &none  &none
&kp LG(Z)  &none      &kp LG(LS(NUMBER_4))  &kp LG(H)  &none    &none  &none  &none  &none  &none
                                            &none      &none    &none  &none
            >;
        };

        num {
            bindings = <
&none         &none     &none      &none           &none    &kp PLUS   &kp N7   &kp N8  &kp N9  &kp ASTERISK
&kp LEFT_GUI  &kp LALT  &kp LCTRL  &kp LSHFT       &none    &kp MINUS  &kp N4   &kp N5  &kp N6  &kp SLASH
&sk LEFT_GUI  &sk LALT  &sk LCTRL  &sk LEFT_SHIFT  &none    &kp N0     &kp N1   &kp N2  &kp N3  &kp EQUAL
                                   &none           &none    &none      &kp DOT
            >;
        };

        nav-media {
            bindings = <
&none         &none     &none      &none           &none    &kp C_VOL_UP  &kp PG_UP   &kp UP      &kp PG_DN   &kp C_MUTE
&kp LEFT_GUI  &kp LALT  &kp LCTRL  &kp LSHFT       &none    &kp HOME      &kp LEFT    &kp DOWN    &kp RIGHT   &kp END
&sk LEFT_GUI  &sk LALT  &sk LCTRL  &sk LEFT_SHIFT  &none    &kp C_VOL_DN  &kp C_PREV  &kp C_PLAY  &kp C_NEXT  &kp K_CMENU
                                   &none           &none    &none         &none
            >;
        };

        symb {
            bindings = <
&kp EXCL      &kp AT    &kp HASH       &kp DLLR        &kp PERCENT    &kp PLUS   &kp LEFT_BRACKET      &kp RIGHT_BRACKET      &kp GRAVE  &kp STAR
&kp LEFT_GUI  &kp LALT  &kp LCTRL      &kp LEFT_SHIFT  &none          &kp MINUS  &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS  &kp UNDER  &kp SLASH
&kp CARET     &kp AMPS  &kp BACKSLASH  &none           &none          &kp PIPE   &kp LEFT_BRACE        &kp RIGHT_BRACE        &kp TILDE  &kp EQUAL
                                       &none           &none          &none      &none
            >;
        };

        adj {
            bindings = <
&none  &none  &none  &none  &none          &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2   &bt BT_SEL 3  &bt BT_SEL 4
&none  &none  &none  &none  &none          &none         &kp C_BRI_UP  &kp C_BRI_DEC  &none         &bt BT_CLR
&none  &none  &none  &none  &none          &none         &none         &none          &none         &out OUT_TOG
                     &none  &bootloader    &bootloader   &none
            >;
        };
    };
};
